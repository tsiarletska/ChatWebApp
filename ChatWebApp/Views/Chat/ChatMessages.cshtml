@model List<ChatWebApp.Models.Message>
@{
    ViewData["Title"] = "Chat Messages";
}

<h2>Chat Messages</h2>

<!-- Display messages -->
<ul id="messages">
    @foreach (var message in Model)
    {
         <strong>@message.Sender?.Nickname:</strong> @message.Text <br />
         @message.SentAt<br />
         @message.Status<br />
    }
</ul>

<!-- Send message form -->
<form id="messageForm">
    <input type="hidden" id="chatId" value="@ViewBag.ChatId" />
    <textarea id="messageInput" placeholder="Type your message..." rows="4" required></textarea>
    <button type="submit">Send</button>
</form>

<!-- SignalR Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    const chatId = document.getElementById('chatId').value;
    const connection = new signalR.HubConnectionBuilder()
        .withUrl('/chathub')
        .build();

    connection.start().then(() => {
        console.log("Connected to SignalR hub");
        connection.invoke("JoinChat", chatId); // Join the current chat group
    }).catch(err => console.error(err.toString()));

    // Listen for incoming messages
    connection.on("ReceiveMessage", (sender, message) => {
        const messagesList = document.getElementById("messages");
        const newMessage = document.createElement("li");
        newMessage.innerHTML = `<strong>${sender}:</strong> ${message}`;
        messagesList.appendChild(newMessage);
    });

    // Send a message
    document.getElementById("messageForm").addEventListener("submit", async (e) => {
        e.preventDefault();
        const sender = "@Context.Session.GetString("Nickname")";
        const message = document.getElementById("messageInput").value;
        await connection.invoke("SendMessage", chatId, sender, message);
        document.getElementById("messageInput").value = ""; // Clear input
    });
</script>
